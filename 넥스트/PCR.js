// 출처: https://co-no.tistory.com/entry/%ED%86%B5%EC%8B%A0-RPCRemote-Procedure-Call%EC%9D%98-%EA%B0%9C%EB%85%90-%EB%B0%8F-%ED%8A%B9%EC%A7%95 
// RPC는 원격 프로시저 호출(Remote Procedure Call)의 약어로, 
// : Remote Procedure Call(원격 프로시저 호출)의 약자로, 별도의 원격 제어를 위한 코딩 없이 다른 주소 공간에서 
// *함수나 **프로시저를 실행할 수 있게 하는 프로세스 간 통신 기술을 말한다.

//  RPC를 이용하면 프로그래머는 함수 또는 프로시저가 실행 프로그램이 존재하는 로컬 위치에 있든,
//   원격 위치에 있든 상관없이 동일한 기능을 수행할 수 있음을 의미한다.
// 네트워크를 통해 다른 컴퓨터나 프로세스에 있는 함수 또는 프로시저를 호출하는 기술입니다. 
// 클라이언트는 로컬 함수를 호출하는 것처럼 원격 시스템에 있는 함수를 호출할 수 있습니다.

// 함수 vs 프로시저

// * 함수(Function) : Input에 따른 Output의 발생을 목적으로 한다.
//  따라서 Return값을 필수로 가져야 하며, Client단에서 처리되기 때문에 주로 간단한 계산 및 수치 등을 도출할 때 사용한다. 

// ** 프로시저(Procedure) : Output값 자체에 집중하기보단, '명령 단위가 수행하는 절차'에 집중한 개념이라고 보면 된다.

// 따라서 Return값이 있을수도 있고, 없을수도 있으며, Server단에서 처리되기 때문에 함수보다 큰 단위의 실행, 프로세싱 등을 할 때 사용한다.

// 일반적으로 프로세스(Process)는 자신의 주소공간 안에 존재하는 함수만 호출하여 실행 가능하다. 

// 그러나, RPC의 경우 자신과 다른 주소공간에서 동작하는 프로세스의 함수를 실행할 수 있게 해주는데, 
// 이는 네트워크를 통한 메시징을 수행하기 때문이다.

// RPC의 목표
// - Client-Server 간의 커뮤니케이션에 필요한 상세정보는 최대한 감춘다. (=> 언어나 환경에 구애를 받지 않는다! )

// - Client와 Server는 각각 일반 메소드를 호출하는 것처럼 원격지의 프로시저를 호출할 수 있다.

 

// RPC는 분산 시스템에서 컴퓨터나 프로세스 간 통신을 위해 사용됩니다. 
// 클라이언트에서 호출하는 함수는 원격 서버에 위치하고 있으며, 
// 클라이언트가 이 함수를 호출하면 네트워크를 통해 해당 서버에 요청이 전송됩니다. 
// 서버는 요청을 받아서 해당 함수를 실행하고, 결과를 다시 클라이언트에게 반환합니다.

// RPC의 구현 방식은 다양할 수 있으며, 주로 사용되는 방식은 다음과 같습니다:

// 프로시저 호출 인터페이스(Procedure Call Interface, PCI): 
// 클라이언트가 서버에 요청을 보낼 때 사용할 함수와 매개변수를 명시적으로 정의하는 인터페이스입니다.
//  클라이언트와 서버는 이러한 인터페이스를 공유하여 통신합니다.

// 원격 객체(Remote Object): 클라이언트가 원격 객체의 메서드를 호출하는 것처럼 서버에 있는 객체의 메서드를 호출합니다.
// 이 방식은 객체 지향 프로그래밍에서 자주 사용됩니다.

// RPC는 분산 시스템에서 다양한 서비스 간 통신에 사용되며, 
// 웹 애플리케이션 개발에서도 API 호출이나 마이크로서비스 간 통신 등에 널리 활용됩니다. 
// RPC는 클라이언트와 서버 간의 투명한 통신을 제공하여 애플리케이션의 모듈성과 확장성을 향상시킵니다.