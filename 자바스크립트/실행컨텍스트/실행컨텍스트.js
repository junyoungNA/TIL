//ECMAScript 사양은 소스코드를 4가지 타입으러 구분한다

//전역코드
//전역 코드는 전역 변수를 관리하기 위해 최상위 스코프인 전역스코프를 생성해야 한다,
//그리고 var키워드로 선언된 전역 변수와 함수 선언문으로 정의된 전역 함수를 전역 객체의
//프로퍼티와 메서드로 바인딩하고 첨조하기 위해 전역 객체와 연결되어야 한다.
//이를 위해 전역 코드가 평가되면 전역 실행 컨텍스트가 생성된다.

//함수 코드
//함수 코드는 지역 스코프를 생성하고 지역변수, 매개변수, arguments 객체를 관리해야 한다.
//그리고 생성한 지역 스코프에서 시작하는 스코프 체인의 일원으로 연결해야 한다.
//이를 위해 함수 코드가 평가되면 함수 실행 컨텍스트가 생성된다.


//eval 코드
//eval 코드는 strict mode에서 자신만의 독자적인 스코프를 생성한다. 이를 위해 eval 코드가 생성되면
//eval 실행 컨텍스트가 생성된다.


//모듈 코드
//모듈 코드는 모듈별로 독립적인 모듈 스코프를 생성한다. 이를 위해 모듈 코드가 평가되면 모듈 싱행 컨텍스트가 생성된다.


//모든 소스코드는 실행에 앞서 평가 과정을 거치며 코드를 실행하기 위한 준비를 한다. 다시말해, 자바스크립트 엔진은 소스코드를 2개의 과정,
//즉 "소드코드의 평가"와 '소스코드의 실행' 과정으로 나누어 처리한다.

//소스코드 평가 과정에서는 실행 컨텍스트를 생성하고 변수, 함수 등의 선언문만 먼저 실행하여 생성된 변수나 함수 식별자를 키로 실행
//컨텍스트가 관리하는 스코프(렉시컬 환경 레코드)에 등록한다.
//소스코드 평가 과정이 끝나면 비로소 선언문을 제외한 소스코드가 순차적으로 실행되기 시작한다. 즉 
//런타임이 시작된다. 이때 소스코드 실행에 필요한 정보, 즉변수나 함수의 참조를 실행 
//컨텍스트가 관리하는 스코프에서 검색해서 취득한다. 
//그리고 변수 값의 변경 등 소스코드의 실행 결과는 다시 실행 컨텍스트가 괸리하는 스코프에 등록된다.


//함수 실행 컨텍스트가 제거되었다고 해서 그 종료된 함수에 렉시컬 환경까지 즉시 소멸 하는 것은 아니다.
//렉시컬 환경은 실행 컨텍스트에 의해 참조되기는 하지만 독립적인 객체다.
//객체를 포함한 모든 값은 누군가에 의해 참조되지 않을때 
//비로소 가비지 컬렉터에 의해 메모리 공간의 확보가 해체되어 소멸한다.
//함수 실행 컨텍스트가 소멸 되었더라도 만약 그 함수가 렉시컬 환경을 누군가 참조하고 있다면
//종료된 함수의 렉시컬 환경은 소멸하지 않는다! 클로저의 근거?

// function makeCount() {
//     let count = 0;
//     return function plus() {
//         return ++count
//         //여기서 연산되는 count는 외부 렉시컬 환경의 count를 바라보고있다.
//         //즉!
//         //이 plus함수에 의해 makeCount에 실행컨텍트가 종료되어도(makeCount함수가 종료되어도)
//         //makeCount 렉시컬 환경은 종료되지않는다
//     }
// }
// let counter = makeCount() //makeCount함수가 종료되어 그안에있는 렉시컬환경은 그대로 보존!
// console.log(counter()); //1
// console.log(counter()); //2
// console.log(counter()); //3
// console.log(counter()); //4
// console.log(counter()); //5

//for문은 코드 블록이 반복되서 실행될 때마다 코드블록을 위한 새로운 렉시컬 환경을 생성한다.
//만약 for문의 코드블록 내에서 정의된 함수가 있다면 이 함수의 상위 스코프는
//for문의 코드 블록이 생성한 렉시컬 환경이다.

//이때 함수의 상위 스코프는 for문의 코드블록이 반복해서 실행될 때 마다 식별자
//for 문의 변수 선언문 및 for문의 코드 블록내에서 선언된 지역 변수 등
//의 값을 유지해야 한다. 이를 위해 for문의 코드블록이 반복해서
//실행될때마다 독립적인 렉시컬 환경을 생성하여 식별자의 값을 유지한다.

for(let i = 0; i < 3; i++) {
    console.log(i);
    //0
    //1
    //2 
    //반복문이 돌면서 독립전인 렉시컬 환경을 계속해서 생성?
    //즉 0번째 렉시컬 환경 안에 1을 사용할 렉시컬환경
    //2를 사용할 렉시컬환경이 걔속해서 안에 만들어지는 건가?
}



